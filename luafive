--[[
    ADVANCED AUTO TRAIN SCRIPT
    - Multi-threaded training
    - Delta value manipulation
    - Real-time monitoring
    - Hotkey controls
]]

-- ════════════════════════════════════════════════════════════════
-- CONFIGURATION
-- ════════════════════════════════════════════════════════════════
local CONFIG = {
    -- Training Settings
    TrainSpeed = 9e999,           -- Speed multiplier (bisa sampai 9e308 kalau mau lebih ekstrem)
    Threads = 200,                -- Jumlah thread paralel
    TickDelay = 0,                -- Delay antar tick (0 = maksimal speed)
    
    -- Equipment
    StationaryEquipID = 2008,     -- ID equipment stationary (ANGKA, bukan string!)
    
    -- Monitoring
    ShowStats = true,             -- Tampilkan statistik real-time
    UpdateInterval = 1,           -- Update stats tiap N detik
}

-- ════════════════════════════════════════════════════════════════
-- SERVICES & REMOTES
-- ════════════════════════════════════════════════════════════════
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")

local Remotes = {
    Equipment = {
        TakeUpStationary = RS.TrainEquipment.Remote.ApplyTakeUpStationaryTrainEquipment,
        Stationary = RS.TrainEquipment.Remote.ApplyStationaryTrain,
        Mobile = RS.TrainEquipment.Remote.ApplyMobileTrain,
    },
    Train = {
        Speed = RS.TrainSystem.Remote.TrainSpeedHasChanged,
        CombatPower = RS.TrainSystem.Remote.PlayerCombatPowerHasChanged,
    }
}

-- ════════════════════════════════════════════════════════════════
-- STATE MANAGEMENT
-- ════════════════════════════════════════════════════════════════
local State = {
    running = false,
    threads = {},
    stats = {
        tickCount = 0,
        errorCount = 0,
        startTime = 0,
        lastCombatPower = 0,
    }
}

-- ════════════════════════════════════════════════════════════════
-- UTILITY FUNCTIONS
-- ════════════════════════════════════════════════════════════════
local function formatNumber(num)
    if num >= 1e12 then
        return string.format("%.2fT", num / 1e12)
    elseif num >= 1e9 then
        return string.format("%.2fB", num / 1e9)
    elseif num >= 1e6 then
        return string.format("%.2fM", num / 1e6)
    elseif num >= 1e3 then
        return string.format("%.2fK", num / 1e3)
    else
        return tostring(num)
    end
end

local function log(msg, color)
    color = color or Color3.fromRGB(255, 255, 255)
    print(string.format("[AutoTrain] %s", msg))
end

local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        State.stats.errorCount = State.stats.errorCount + 1
        warn("[AutoTrain] Error:", result)
        return false, result
    end
    return true, result
end

-- ════════════════════════════════════════════════════════════════
-- CORE TRAINING LOGIC
-- ════════════════════════════════════════════════════════════════
local function equipStationaryGear()
    log("Equipping stationary gear...", Color3.fromRGB(255, 255, 0))
    
    local success, err = safeCall(function()
        -- PENTING: Kirim sebagai NUMBER, bukan string!
        return Remotes.Equipment.TakeUpStationary:InvokeServer(CONFIG.StationaryEquipID)
    end)
    
    if success then
        log("✓ Equipment equipped successfully", Color3.fromRGB(0, 255, 0))
    else
        log("✗ Failed to equip: " .. tostring(err), Color3.fromRGB(255, 0, 0))
    end
    
    return success
end

local function performTrainingTick()
    -- Ini adalah satu "tick" training yang akan di-spam
    local success = true
    
    -- 1. Apply Stationary Train
    local ok1, r1 = safeCall(function()
        return Remotes.Equipment.Stationary:InvokeServer()
    end)
    
    -- 2. Apply Mobile Train
    local ok2, r2 = safeCall(function()
        return Remotes.Equipment.Mobile:InvokeServer()
    end)
    
    -- 3. Set Train Speed (ini yang membuat delta meningkat drastis!)
    local ok3 = safeCall(function()
        Remotes.Train.Speed:FireServer(CONFIG.TrainSpeed)
    end)
    
    if ok1 and ok2 and ok3 then
        State.stats.tickCount = State.stats.tickCount + 1
    else
        success = false
    end
    
    return success
end

-- ════════════════════════════════════════════════════════════════
-- THREAD MANAGEMENT
-- ════════════════════════════════════════════════════════════════
local function stopAllThreads()
    State.running = false
    log("Stopping all threads...", Color3.fromRGB(255, 165, 0))
    
    for i, thread in pairs(State.threads) do
        task.cancel(thread)
    end
    
    State.threads = {}
    log(string.format("✓ Stopped %d threads", #State.threads), Color3.fromRGB(0, 255, 0))
end

local function startTraining()
    if State.running then
        log("Already running!", Color3.fromRGB(255, 255, 0))
        return
    end
    
    stopAllThreads()
    
    -- Reset stats
    State.stats = {
        tickCount = 0,
        errorCount = 0,
        startTime = tick(),
        lastCombatPower = 0,
    }
    
    State.running = true
    log(string.format("Starting %d threads...", CONFIG.Threads), Color3.fromRGB(0, 255, 255))
    
    -- Equip gear first
    task.wait(0.5)
    equipStationaryGear()
    task.wait(0.5)
    
    -- Spawn worker threads
    for i = 1, CONFIG.Threads do
        local thread = task.spawn(function()
            while State.running do
                performTrainingTick()
                
                if CONFIG.TickDelay > 0 then
                    task.wait(CONFIG.TickDelay)
                end
            end
        end)
        
        table.insert(State.threads, thread)
    end
    
    log(string.format("✓ Started %d threads successfully!", CONFIG.Threads), Color3.fromRGB(0, 255, 0))
    
    -- Stats monitor thread
    if CONFIG.ShowStats then
        task.spawn(function()
            while State.running do
                task.wait(CONFIG.UpdateInterval)
                
                local elapsed = tick() - State.stats.startTime
                local tps = State.stats.tickCount / elapsed
                
                log(string.format(
                    "Stats | Ticks: %s | TPS: %.1f | Errors: %d | Time: %.1fs",
                    formatNumber(State.stats.tickCount),
                    tps,
                    State.stats.errorCount,
                    elapsed
                ), Color3.fromRGB(100, 200, 255))
            end
        end)
    end
end

-- ════════════════════════════════════════════════════════════════
-- HOTKEY CONTROLS
-- ════════════════════════════════════════════════════════════════
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    -- F = Toggle Training
    if input.KeyCode == Enum.KeyCode.F then
        if State.running then
            stopAllThreads()
            log("═══ TRAINING STOPPED ═══", Color3.fromRGB(255, 0, 0))
        else
            log("═══ TRAINING STARTED ═══", Color3.fromRGB(0, 255, 0))
            startTraining()
        end
    end
    
    -- R = Restart (stop + start)
    if input.KeyCode == Enum.KeyCode.R then
        log("Restarting...", Color3.fromRGB(255, 255, 0))
        stopAllThreads()
        task.wait(1)
        startTraining()
    end
    
    -- E = Equip Gear Only
    if input.KeyCode == Enum.KeyCode.E then
        equipStationaryGear()
    end
end)

-- ════════════════════════════════════════════════════════════════
-- COMBAT POWER MONITOR (opsional)
-- ════════════════════════════════════════════════════════════════
if Remotes.Train.CombatPower then
    Remotes.Train.CombatPower.OnClientEvent:Connect(function(player, newPower)
        if player == Players.LocalPlayer then
            local diff = newPower - State.stats.lastCombatPower
            if diff > 0 then
                log(string.format(
                    "Combat Power: %s (+%s)",
                    formatNumber(newPower),
                    formatNumber(diff)
                ), Color3.fromRGB(255, 215, 0))
            end
            State.stats.lastCombatPower = newPower
        end
    end)
end

-- ════════════════════════════════════════════════════════════════
-- AUTO-START
-- ════════════════════════════════════════════════════════════════
log("═══════════════════════════════════════", Color3.fromRGB(0, 255, 255))
log("  ADVANCED AUTO TRAIN LOADED", Color3.fromRGB(0, 255, 255))
log("═══════════════════════════════════════", Color3.fromRGB(0, 255, 255))
log("Controls:", Color3.fromRGB(255, 255, 0))
log("  [F] = Toggle Training", Color3.fromRGB(255, 255, 255))
log("  [R] = Restart", Color3.fromRGB(255, 255, 255))
log("  [E] = Equip Gear", Color3.fromRGB(255, 255, 255))
log("═══════════════════════════════════════", Color3.fromRGB(0, 255, 255))

-- Auto-start after 3 seconds
task.wait(3)
log("Auto-starting in 3 seconds...", Color3.fromRGB(255, 255, 0))
task.wait(3)
startTraining()
